syntax = "proto3";

package org.corfudb.runtime;
option java_package = "org.corfudb.runtime";

import "corfu_options.proto";
import "rpc_common.proto";
import "google/protobuf/timestamp.proto";

message LogReplicationEntryMetadataMsg {
  int64 topologyConfigID = 1;
  LogReplicationEntryType entry_type = 2;
  int64 timestamp = 3;
  int64 previousTimestamp = 4;
  UuidMsg syncRequestId = 5;
  int64 snapshotTimestamp = 6;
  int64 snapshotSyncSeqNum = 7;
}

message LogReplicationEntryMsg {
  LogReplicationEntryMetadataMsg metadata = 1;
  bytes data = 2;
}

message LogReplicationMetadataRequestMsg {
}

message LogReplicationMetadataResponseMsg {
  uint64 topologyConfigID = 1;
  string version = 2;
  uint64 snapshotStart = 3;
  uint64 snapshotTransferred = 4;
  uint64 snapshotApplied = 5;
  uint64 lastLogEntryTimestamp = 6;
}

message LogReplicationLeadershipLossResponseMsg {
  string nodeId = 1;
}

message LogReplicationLeadershipRequestMsg {
}

message LogReplicationLeadershipResponseMsg {
  bool isLeader = 2;
  string nodeId = 3;
}

enum LogReplicationEntryType {
  LOG_ENTRY_MESSAGE = 0;
  SNAPSHOT_MESSAGE = 1;
  SNAPSHOT_START = 2;
  LOG_ENTRY_REPLICATED = 3;
  SNAPSHOT_REPLICATED = 4;
  SNAPSHOT_END = 5;
  SNAPSHOT_TRANSFER_COMPLETE = 6;
}

enum ReplicationModel {
  NONE = 0;
  FULL_TABLE = 1;                 // Full table replication (Single Source to Single Sink = 1:1)
  ROUTING_QUEUES = 2;             // Routing queue replication (used for entry-level replication) (1:1)
  LOGICAL_GROUPS = 3;             // Table association to logical group (1:1)
  MULTI_SOURCE_MERGE = 4;         // Same table replication from multiple sources to single sink (n:1)
}

// Key for LogReplicationModelMetadataTable
message ClientDestinationInfoKey {
  ReplicationModel model = 1;
  string client_name = 2;
  string group_name = 3;
}

// Value for LogReplicationModelMetadataTable
message DestinationInfoVal {
  option (org.corfudb.runtime.table_schema).stream_tag = "lr_sessions";
  repeated string destination_ids = 1;
}

// Key for LogReplicationRegistrationTable
message ClientRegistrationId {
  string client_name = 1;
}

// Value for LogReplicationRegistrationTable
message ClientRegistrationInfo {
  option (org.corfudb.runtime.table_schema).stream_tag = "lr_sessions";
  string client_name = 1;
  ReplicationModel model = 2;
  google.protobuf.Timestamp registration_time = 3;
}

message LogReplicationSession {
  string sink_cluster_id = 1;
  string source_cluster_id = 2;
  ReplicationSubscriber subscriber = 3;
}

message ReplicationSubscriber {
  ReplicationModel model = 1;
  string client_name = 2;
}

/*-------- Replication Status Table V2------*/

enum SyncType {
  SNAPSHOT = 0;
  LOG_ENTRY = 1;
}

/*
 * SyncStatus
 *
 * COMPLETED:   Used in SnapshotSyncInfo only for the latest snapshot sync
 * ERROR:       Log Replication is unrecoverable, need to restart
 * NOT_STARTED: Log Replication might be in the very beginning state
 * STOPPED:     Log Replication is in initialized state
 */
enum SyncStatus {
  NOT_STARTED = 0;
  ONGOING = 1;
  COMPLETED = 2;
  STOPPED = 3;
  ERROR = 4;
  NOT_AVAILABLE = 5;
}

message ReplicationStatus {
  option (org.corfudb.runtime.table_schema).stream_tag = "lr_status";
  oneof status {
    SourceReplicationStatus source_status = 1;
    SinkReplicationStatus sink_status = 2;
  }
}

message SourceReplicationStatus {
  uint64 remaining_entries_to_send = 1;
  ReplicationInfo replication_info = 2;
}

message SinkReplicationStatus {
  bool data_consistent = 1;
  ReplicationInfo replication_info = 2;
}

/*
 * Snapshot Sync Info
 *
 * If replication is in SNAPSHOT sync, this provides details of the
 * ongoing snapshot sync. If replication is in LOG ENTRY sync (delta).
 * this provides details of the previous SNAPSHOT sync leading up to
 * the log entry sync.
 */
message SnapshotSyncInfo {
  enum SnapshotSyncType {
    DEFAULT = 0;
    FORCED = 1;
  }
  SnapshotSyncType type = 1;
  SyncStatus status = 2;
  string snapshot_request_id = 3;
  google.protobuf.Timestamp completed_time = 4;
  uint64 base_snapshot = 5;
}

message ReplicationInfo {
  SyncType sync_type = 1;
  SyncStatus status = 2;
  SnapshotSyncInfo snapshot_sync_info = 3;
}

/*------------------------------------*/

message ReverseReplicateMsg {
  string sink_leader_node_id = 1;
}
