syntax = "proto3";

package org.corfudb.runtime;
option java_package = "org.corfudb.runtime.proto.service";

import "rpc_common.proto";
import "log_data.proto";

/**
 * Protobuf definitions for the LogUnit server RPCs. These
 * include request and response payloads for: WRITE, RANGE_WRITE,
 * READ, INSPECT_ADDRESSES, TRIM_LOG (PREFIX_TRIM), TRIM_MARK,
 * TAIL, COMPACT, FLUSH_CACHE, LOG_ADDRESS_SPACE, KNOWN_ADDRESS,
 * COMMITTED_TAIL, UPDATE_COMMITTED_TAIL, and RESET_LOG_UNIT.
 */

message WriteLogRequestMsg {
  LogDataMsg log_data = 1;
}

message WriteLogResponseMsg {
}

message RangeWriteLogRequestMsg {
  repeated LogDataMsg log_data = 1;
}

message RangeWriteLogResponseMsg {
}

message ReadLogRequestMsg {
  repeated int64 address = 1;
  bool cache_results = 2;
}

message ReadLogResponseMsg {
  repeated ReadResponseMsg response = 1;
}

// A request to inspect a list of addresses,
// which checks if any address is not committed.
message InspectAddressesRequestMsg {
  repeated int64 address = 1;
}

message InspectAddressesResponseMsg {
  repeated int64 empty_address = 1;
}

message TrimLogRequestMsg {
  TokenMsg address = 1;
}

message TrimLogResponseMsg {
}

message TrimMarkRequestMsg {
}

message TrimMarkResponseMsg {
  int64 trim_mark = 1;
}

/**
 * A tail request can be specific to the following types:
 * - Global log tail.
 * - Tails for specific streams (uniquely identified).
 * - Tails for all available streams.
 * Whenever tails are requested for streams (specific or all),
 * the global log tail is sent along the response.
 */
message TailRequestMsg {
  enum Type {
    LOG_TAIL = 0;
    ALL_STREAMS_TAIL = 1;
  }

  Type req_type = 1;
  repeated UuidMsg stream = 2;
}

message TailResponseMsg {
  int64 epoch = 1;
  int64 log_tail = 2;
  repeated UuidToLongPairMsg stream_tail = 3;
}

message CompactRequestMsg {
}

message CompactResponseMsg {
}

message FlushCacheRequestMsg {
}

message FlushCacheResponseMsg {
}

message LogAddressSpaceRequestMsg {
}

message LogAddressSpaceResponseMsg {
  int64 log_tail = 1;
  int64 epoch = 2;
  repeated UuidToStreamAddressSpacePairMsg address_map = 3;
}

// Request for known addresses in the log unit
// server for a specified range.
message KnownAddressRequestMsg {
  int64 start_range = 1;
  int64 end_range = 2;
}

message KnownAddressResponseMsg {
  repeated int64 known_address = 1;
}

message CommittedTailRequestMsg {
}

message CommittedTailResponseMsg {
  int64 committed_tail = 1;
}

message UpdateCommittedTailRequestMsg {
  int64 committed_tail = 1;
}

message UpdateCommittedTailResponseMsg {
}

message ResetLogUnitRequestMsg {
  int64 epoch = 1;
}

message ResetLogUnitResponseMsg {
}
