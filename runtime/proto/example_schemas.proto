syntax = "proto3";

package org.corfudb.runtime;
option java_package = "org.corfudb.runtime";

import "corfu_options.proto";
import "google/protobuf/descriptor.proto";

message ManagedMetadata {
    int64 revision = 1;
    int64 create_time = 2;
    string create_user = 3;
    int64 last_modified_time = 4;
    string last_modified_user = 5;
}

message Uuid {
    fixed64 msb = 1;
    fixed64 lsb = 2;
}

message ClusterUuidMsg {
    option (org.corfudb.runtime.table_schema).stream_tag = "cluster_manager_test";
    fixed64 msb = 1;
    fixed64 lsb = 2;
}

message ExampleValue {
    option (org.corfudb.runtime.table_schema).stream_tag = "search_streamer";
    option (org.corfudb.runtime.table_schema).stream_tag = "slow_streamer";
    option (org.corfudb.runtime.table_schema).requires_backup_support = true;
    option (org.corfudb.runtime.table_schema).is_federated = true;

    string payload = 1;
    fixed64 anotherKey = 2 [(org.corfudb.runtime.schema).secondary_key = true];
    Uuid uuid = 3 [(org.corfudb.runtime.schema).secondary_key = true];
    fixed64 entryIndex = 4;
    NonPrimitiveValue non_primitive_field_level_0 = 5 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "non_primitive_field_level_0.key_1_level_1"},
                                                      (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "non_primitive_field_level_0.key_2_level_1.key_1_level_2"}];
}

message ExampleTableName {
    option (org.corfudb.runtime.table_schema).stream_tag = "table_name_streamer";
    string namespace = 1;
    string table_name = 2;
}

message NonPrimitiveValue {
    fixed64 key_1_level_1 = 1;
    NonPrimitiveNestedValue key_2_level_1 = 2;
}

message NonPrimitiveNestedValue {
    string key_1_level_2 = 1;
    fixed64 level_number = 2;
}

message InvalidExampleValue {
    string field1 = 1;
    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "field1.key1Level1"},
                                 (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "field2.key2Level1.key1Level2"}];
}

message InvalidNestedSecondaryIndex {
    string field1 = 1;
    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "field2.key_1_level_1"},
                                 (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "field2.key_2_level_1.deprecated"}];
}

message InvalidFullNestedSecondaryIndex {
    string field1 = 1;
    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "field2.key_1_level_1.key_1_level_2"},
                                 (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "field2.key_2_level_1.key_1_level_2"}];
}

message NotNestedSecondaryIndex {
    string field1 = 1;
    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "field2"}];
    fixed64 field3 = 3 [(org.corfudb.runtime.schema).nested_secondary_key = {index_path: "field3"}];
}

message ClassRoom {
    repeated Student students = 1 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "students.age"}];
    Infrastructure classInfra = 2;
}

message Student {
    string name = 1;
    fixed64 age = 2;
}

message Person {
    string name = 1;
    fixed64 age = 2;
    PhoneNumber phoneNumber = 3 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "phoneNumber.mobile"}];
    Children children = 4;
}

message InvalidAdultDefaultIndexName {
    Person person = 1 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "person.age"},
                      (org.corfudb.runtime.schema).nested_secondary_key = { index_path:"person.children.child.age"}];
    Company work = 2;
}

message InvalidAdultCustomIndexName {
    Person person = 1 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "person.age" index_name: "howOld"},
                      (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "person.children.child.age" index_name: "howOld"}];
    Company work = 2;
}

message Adult {
    Person person = 1 [
                       // Default Index Name will be 'age'
                       (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "person.age"},
                       // Explicit (custom) Index Name
                       (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "person.children.child.age" index_name: "kidsAge" },
                       // Index on a non-primitive type (which won't always be set)
                       (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "person.children.child"}];
    Company work = 2 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "work.company_id" }];
    repeated Address addresses = 3 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "addresses.unique_address_id" index_name: "address"}];
}

message SportsProfessional {
    Person person  = 1;
    // Non-Repeated Field followed by oneOf non-primitive sub-field
    Hobby profession = 3 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "profession.basket" index_name: "basketPlayers"},
                             (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "profession.baseball" index_name: "baseballPlayers"}];
    // Repeated Field followed by oneOf non-primitive sub-field
    repeated Hobby hobby = 4 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "hobby.basket" index_name: "basketAsHobby"},
                             (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "hobby.baseball" index_name: "baseballAsHobby"}];
    // Repeated Field followed by repeated field sub-field
    repeated TrainingPlan training = 5 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "training.exercises" }];
}

message TrainingPlan {
    repeated Exercise exercises = 1;
    string date = 2;
}

message Exercise {
    string name = 1;
    fixed64 repetitions = 2;
    fixed64 weight = 3;
}

message Hobby {
    oneof sport {
        Basketball basket = 1;
        Baseball baseball = 2;
    }
}

message Basketball {
     fixed64 players = 1;
     string team = 2;
}

message Baseball {
    fixed64 balls = 1;
    string pitchersName = 2;
}

message Children {
    repeated Child child = 1;
}

message Child {
    string name = 1;
    fixed64 age = 2;
}

message PhoneNumber {
    repeated string mobile = 1;
    string home = 2;
}

message Office {
    string office_nickname = 1;
    repeated Department departments = 2 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "departments.members.phoneNumbers"}];
}

message Company {
    Uuid company_id = 1;
    repeated Office office = 2 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "office.departments"}];
}

message Department {
    repeated Member members = 1;
}

message Member {
    string name = 1;
    fixed64 age = 2;
    repeated string phoneNumbers = 3;
}

message School {
    repeated ClassRoom classRooms = 1 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "classRooms.classInfra.numberDesks"},
                                      (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "classRooms.classInfra.others"}];
}

message Infrastructure {
    fixed64 numberDesks = 1;
    repeated string others = 2;
    fixed64 roomSizeInMeters = 3;
}

message Network {
    repeated Device devices = 1 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "devices.router"}];
}

message Device {
    Router router = 2;
}

message Router {
    string brand = 1;
    repeated string interfaces = 2;
    string cpu = 3;
    string ram = 4;
}

message ContactBook {
    repeated Contact contacts = 1 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "contacts.number"},
                                  (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "contacts.address.city"},
                                  (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "contacts.number.mobile"},
                                  (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "contacts.photo.file"}];
    ContactBookId id = 2 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "id.uuid"},
                          (org.corfudb.runtime.schema).nested_secondary_key = { index_path: "id.name"}];
    oneof type {
        // If physical Contact Book, brand
        string brand = 3 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "brand"}];
        // If virtual Contact Book, application for contacts
        string application = 4 [(org.corfudb.runtime.schema).nested_secondary_key = { index_path: "application"}];
    }
}

message ContactBookId {
    oneof identifier {
        string uuid = 1;
        string name = 2;
    }
}

message Contact {
    string name = 1;
    oneof contactInformation {
        PhoneNumber number = 2;
        Address address = 3;
    }
    Photo photo = 4;
}

message Photo {
    oneof format {
        string file = 1;
        string description = 2;
    }
}

message Address {
    Uuid unique_address_id = 1;
    fixed64 number = 2;
    string city = 3;
    string street = 4;
    string unit = 5;
}
