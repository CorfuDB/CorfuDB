diff a/test/src/test/java/org/corfudb/integration/CorfuReplicationReconfigurationIT.java b/test/src/test/java/org/corfudb/integration/CorfuReplicationReconfigurationIT.java	(rejected hunks)
@@ -161,18 +163,18 @@ public class CorfuReplicationReconfigurationIT extends LogReplicationAbstractIT
 
         // (7) Verify replication status after all data has been replicated (no further data)
         corfuStoreActive.openTable(LogReplicationMetadataManager.NAMESPACE,
-                LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
-                LogReplicationMetadata.ReplicationStatusKey.class,
-                LogReplicationMetadata.ReplicationStatusVal.class,
+                LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
+                LogReplicationSession.class,
+                ReplicationStatus.class,
                 null,
-                TableOptions.fromProtoSchema(LogReplicationMetadata.ReplicationStatusVal.class));
+                TableOptions.fromProtoSchema(ReplicationStatus.class));
 
         // Wait the polling period time before verifying sync status (to make sure it was updated)
         Sleep.sleepUninterruptibly(Duration.ofSeconds(LogReplicationAckReader.ACKED_TS_READ_INTERVAL_SECONDS + 1));
 
-        long remainingEntriesToSend = verifyReplicationStatus(ReplicationStatusVal.SyncType.LOG_ENTRY,
-                LogReplicationMetadata.SyncStatus.ONGOING, LogReplicationMetadata.SnapshotSyncInfo.SnapshotSyncType.DEFAULT,
-                LogReplicationMetadata.SyncStatus.COMPLETED);
+        long remainingEntriesToSend = verifyReplicationStatus(ReplicationStatus.SyncType.LOG_ENTRY,
+                SyncStatus.ONGOING, SnapshotSyncInfo.SnapshotSyncType.DEFAULT,
+                SyncStatus.COMPLETED);
        assertThat(remainingEntriesToSend).isEqualTo(0L);
 
         // (8) Keep writing data into the TX stream (but with data not intended for replication) while
@@ -207,44 +209,44 @@ public class CorfuReplicationReconfigurationIT extends LogReplicationAbstractIT
         // Wait the polling period time and verify sync status again (to make sure it was not erroneously updated)
         Sleep.sleepUninterruptibly(Duration.ofSeconds(LogReplicationAckReader.ACKED_TS_READ_INTERVAL_SECONDS + delta));
 
-        remainingEntriesToSend = verifyReplicationStatus(ReplicationStatusVal.SyncType.LOG_ENTRY,
-                LogReplicationMetadata.SyncStatus.ONGOING, LogReplicationMetadata.SnapshotSyncInfo.SnapshotSyncType.DEFAULT,
-                LogReplicationMetadata.SyncStatus.COMPLETED);
+        remainingEntriesToSend = verifyReplicationStatus(ReplicationStatus.SyncType.LOG_ENTRY,
+                SyncStatus.ONGOING, SnapshotSyncInfo.SnapshotSyncType.DEFAULT,
+                SyncStatus.COMPLETED);
         assertThat(remainingEntriesToSend).isEqualTo(0L);
     }
 
-    private long verifyReplicationStatus(ReplicationStatusVal.SyncType targetSyncType,
-                                         LogReplicationMetadata.SyncStatus targetSyncStatus,
-                                         LogReplicationMetadata.SnapshotSyncInfo.SnapshotSyncType targetSnapshotSyncType,
-                                         LogReplicationMetadata.SyncStatus targetSnapshotSyncStatus) {
+    private long verifyReplicationStatus(ReplicationStatus.SyncType targetSyncType,
+                                         SyncStatus targetSyncStatus,
+                                         SnapshotSyncInfo.SnapshotSyncType targetSnapshotSyncType,
+                                         SyncStatus targetSnapshotSyncStatus) {
 
-        LogReplicationMetadata.ReplicationStatusKey key =
-                LogReplicationMetadata.ReplicationStatusKey
+        LogReplicationSession key =
+                LogReplicationSession
                         .newBuilder()
                         .setClusterId(DefaultClusterConfig.getStandbyClusterId())
                         .build();
 
-        ReplicationStatusVal replicationStatusVal;
+        ReplicationStatus ReplicationStatus;
         try (TxnContext txn = corfuStoreActive.txn(LogReplicationMetadataManager.NAMESPACE)) {
-            replicationStatusVal = (ReplicationStatusVal)txn.getRecord(LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME, key).getPayload();
+            ReplicationStatus = (ReplicationStatus)txn.getRecord(LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME, key).getPayload();
             txn.commit();
         }
 
-        log.info("ReplicationStatusVal: RemainingEntriesToSend: {}, SyncType: {}, Status: {}",
-                replicationStatusVal.getRemainingEntriesToSend(), replicationStatusVal.getSyncType(),
-                replicationStatusVal.getStatus());
+        log.info("ReplicationStatus: RemainingEntriesToSend: {}, SyncType: {}, Status: {}",
+                ReplicationStatus.getRemainingEntriesToSend(), ReplicationStatus.getSyncType(),
+                ReplicationStatus.getStatus());
 
-        log.info("ReplicationStatusVal: Base: {}, Type: {}, Status: {}, CompletedTime: {}",
-                replicationStatusVal.getSnapshotSyncInfo().getBaseSnapshot(), replicationStatusVal.getSnapshotSyncInfo().getType(),
-                replicationStatusVal.getSnapshotSyncInfo().getStatus(), replicationStatusVal.getSnapshotSyncInfo().getCompletedTime());
+        log.info("ReplicationStatus: Base: {}, Type: {}, Status: {}, CompletedTime: {}",
+                ReplicationStatus.getSnapshotSyncInfo().getBaseSnapshot(), ReplicationStatus.getSnapshotSyncInfo().getType(),
+                ReplicationStatus.getSnapshotSyncInfo().getStatus(), ReplicationStatus.getSnapshotSyncInfo().getCompletedTime());
 
-        assertThat(replicationStatusVal.getSyncType()).isEqualTo(targetSyncType);
-        assertThat(replicationStatusVal.getStatus()).isEqualTo(targetSyncStatus);
-        assertThat(replicationStatusVal.getSnapshotSyncInfo().getType()).isEqualTo(targetSnapshotSyncType);
-        assertThat(replicationStatusVal.getSnapshotSyncInfo().getStatus()).isEqualTo(targetSnapshotSyncStatus);
-        assertThat(replicationStatusVal.getSnapshotSyncInfo().getBaseSnapshot()).isGreaterThan(Address.NON_ADDRESS);
+        assertThat(ReplicationStatus.getSyncType()).isEqualTo(targetSyncType);
+        assertThat(ReplicationStatus.getStatus()).isEqualTo(targetSyncStatus);
+        assertThat(ReplicationStatus.getSnapshotSyncInfo().getType()).isEqualTo(targetSnapshotSyncType);
+        assertThat(ReplicationStatus.getSnapshotSyncInfo().getStatus()).isEqualTo(targetSnapshotSyncStatus);
+        assertThat(ReplicationStatus.getSnapshotSyncInfo().getBaseSnapshot()).isGreaterThan(Address.NON_ADDRESS);
 
-        return replicationStatusVal.getRemainingEntriesToSend();
+        return ReplicationStatus.getRemainingEntriesToSend();
     }
 
     private void openNonReplicatedTable() throws Exception {
@@ -500,11 +502,11 @@ public class CorfuReplicationReconfigurationIT extends LogReplicationAbstractIT
             // Wait until snapshot sync has completed
             // Open replication status table and monitor completion field
             corfuStoreActive.openTable(LogReplicationMetadataManager.NAMESPACE,
-                    LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
-                    LogReplicationMetadata.ReplicationStatusKey.class,
-                    LogReplicationMetadata.ReplicationStatusVal.class,
+                    LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
+                    LogReplicationSession.class,
+                    ReplicationStatus.class,
                     null,
-                    TableOptions.fromProtoSchema(LogReplicationMetadata.ReplicationStatusVal.class));
+                    TableOptions.fromProtoSchema(ReplicationStatus.class));
             blockUntilSnapshotSyncCompleted();
 
             // Verify Snapshot has successfully replicated
@@ -567,30 +569,30 @@ public class CorfuReplicationReconfigurationIT extends LogReplicationAbstractIT
     }
 
     private void blockUntilSnapshotSyncCompleted() {
-        LogReplicationMetadata.ReplicationStatusKey key =
-                LogReplicationMetadata.ReplicationStatusKey
+        LogReplicationSession key =
+                LogReplicationSession
                         .newBuilder()
                         .setClusterId(DefaultClusterConfig.getStandbyClusterId())
                         .build();
 
-        ReplicationStatusVal replicationStatusVal;
+        ReplicationStatus ReplicationStatus;
         boolean snapshotSyncCompleted = false;
 
         while (snapshotSyncCompleted) {
             try (TxnContext txn = corfuStoreActive.txn(LogReplicationMetadataManager.NAMESPACE)) {
-                replicationStatusVal = (ReplicationStatusVal) txn.getRecord(LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME, key).getPayload();
+                ReplicationStatus = (ReplicationStatus) txn.getRecord(LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME, key).getPayload();
                 txn.commit();
             }
 
-            log.info("ReplicationStatusVal: RemainingEntriesToSend: {}, SyncType: {}, Status: {}",
-                    replicationStatusVal.getRemainingEntriesToSend(), replicationStatusVal.getSyncType(),
-                    replicationStatusVal.getStatus());
+            log.info("ReplicationStatus: RemainingEntriesToSend: {}, SyncType: {}, Status: {}",
+                    ReplicationStatus.getRemainingEntriesToSend(), ReplicationStatus.getSyncType(),
+                    ReplicationStatus.getStatus());
 
-            log.info("ReplicationStatusVal: Base: {}, Type: {}, Status: {}, CompletedTime: {}",
-                    replicationStatusVal.getSnapshotSyncInfo().getBaseSnapshot(), replicationStatusVal.getSnapshotSyncInfo().getType(),
-                    replicationStatusVal.getSnapshotSyncInfo().getStatus(), replicationStatusVal.getSnapshotSyncInfo().getCompletedTime());
+            log.info("ReplicationStatus: Base: {}, Type: {}, Status: {}, CompletedTime: {}",
+                    ReplicationStatus.getSnapshotSyncInfo().getBaseSnapshot(), ReplicationStatus.getSnapshotSyncInfo().getType(),
+                    ReplicationStatus.getSnapshotSyncInfo().getStatus(), ReplicationStatus.getSnapshotSyncInfo().getCompletedTime());
 
-            snapshotSyncCompleted = replicationStatusVal.getSnapshotSyncInfo().getStatus() == LogReplicationMetadata.SyncStatus.COMPLETED;
+            snapshotSyncCompleted = ReplicationStatus.getSnapshotSyncInfo().getStatus() == SyncStatus.COMPLETED;
         }
     }
 
