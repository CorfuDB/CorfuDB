diff a/test/src/test/java/org/corfudb/integration/SourceForwardingDataSender.java b/test/src/test/java/org/corfudb/integration/SourceForwardingDataSender.java	(rejected hunks)
@@ -7,7 +7,9 @@ import lombok.extern.slf4j.Slf4j;
 import org.corfudb.common.util.ObservableValue;
 import org.corfudb.infrastructure.logreplication.DataSender;
 import org.corfudb.infrastructure.logreplication.LogReplicationConfig;
-import org.corfudb.infrastructure.logreplication.proto.LogReplicationMetadata;
+import org.corfudb.infrastructure.logreplication.proto.LogReplicationMetadata.ReplicationMetadata;
+import org.corfudb.infrastructure.logreplication.proto.LogReplicationMetadata.ReplicationStatus;
+import org.corfudb.runtime.proto.service.CorfuMessage.LogReplicationSession;
 import org.corfudb.infrastructure.logreplication.replication.receive.LogReplicationMetadataManager;
 import org.corfudb.infrastructure.logreplication.replication.receive.LogReplicationSinkManager;
 import org.corfudb.infrastructure.logreplication.replication.LogReplicationSourceManager;
@@ -95,16 +97,20 @@ public class SourceForwardingDataSender extends AbstractIT implements DataSender
 
     private static final String REPLICATION_STATUS_TABLE = "LogReplicationStatus";
 
+    private final LogReplicationSession sinkSession;
+
     @SneakyThrows
     public SourceForwardingDataSender(String destinationEndpoint, LogReplicationConfig config, LogReplicationIT.TestConfig testConfig,
                                       LogReplicationMetadataManager metadataManager,
-                                      String pluginConfigFilePath, LogReplicationIT.TransitionSource function) {
+                                      String pluginConfigFilePath, LogReplicationIT.TransitionSource function, String sinkClusterId) {
         this.runtime = CorfuRuntime.fromParameters(CorfuRuntime.CorfuRuntimeParameters.builder().build())
                 .parseConfigurationString(destinationEndpoint)
                 .connect();
         this.destinationDataSender = new AckDataSender();
+        this.sinkSession = LogReplicationSession.newBuilder().setClusterId(sinkClusterId).build();
         this.destinationDataControl = new DefaultDataControl(new DefaultDataControlConfig(false, 0));
-        this.destinationLogReplicationManager = new LogReplicationSinkManager(runtime.getLayoutServers().get(0), config, metadataManager, pluginConfigFilePath);
+        this.destinationLogReplicationManager = new LogReplicationSinkManager(runtime.getLayoutServers().get(0),
+                config, metadataManager, pluginConfigFilePath, sinkSession);
         this.ifDropMsg = testConfig.getDropMessageLevel();
         this.delayedApplyCycles = testConfig.getDelayedApplyCycles();
         this.metadataResponseObservable = new ObservableValue<>(null);
@@ -115,10 +121,10 @@ public class SourceForwardingDataSender extends AbstractIT implements DataSender
         this.standbyCorfuStore = new CorfuStore(runtime);
         standbyCorfuStore.openTable(LogReplicationMetadataManager.NAMESPACE,
                 REPLICATION_STATUS_TABLE,
-                LogReplicationMetadata.ReplicationStatusKey.class,
-                LogReplicationMetadata.ReplicationStatusVal.class,
+                LogReplicationSession.class,
+                ReplicationStatus.class,
                 null,
-                TableOptions.fromProtoSchema(LogReplicationMetadata.ReplicationStatusVal.class));
+                TableOptions.fromProtoSchema(ReplicationStatus.class));
         this.destinationClusterID = testConfig.getRemoteClusterId();
     }
 
@@ -316,11 +325,11 @@ public class SourceForwardingDataSender extends AbstractIT implements DataSender
         if (destinationClusterID == null) {
             return;
         }
-        LogReplicationMetadata.ReplicationStatusKey standbyClusterId = LogReplicationMetadata.ReplicationStatusKey.newBuilder()
+        LogReplicationSession standbyClusterId = LogReplicationSession.newBuilder()
                 .setClusterId(destinationClusterID)
                 .build();
         try (TxnContext txn = standbyCorfuStore.txn(LogReplicationMetadataManager.NAMESPACE)) {
-            LogReplicationMetadata.ReplicationStatusVal standbyStatus = (LogReplicationMetadata.ReplicationStatusVal)txn.getRecord(REPLICATION_STATUS_TABLE, standbyClusterId).getPayload();
+            ReplicationStatus standbyStatus = (ReplicationStatus)txn.getRecord(REPLICATION_STATUS_TABLE, standbyClusterId).getPayload();
             assertThat(standbyStatus.getDataConsistent()).isEqualTo(expectedDataConsistent);
         }
     }
