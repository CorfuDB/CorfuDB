diff a/test/src/test/java/org/corfudb/integration/CorfuReplicationUpgradeIT.java b/test/src/test/java/org/corfudb/integration/CorfuReplicationUpgradeIT.java	(rejected hunks)
@@ -2,7 +2,8 @@ package org.corfudb.integration;
 
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
-import org.corfudb.infrastructure.logreplication.proto.LogReplicationMetadata;
+import org.corfudb.infrastructure.logreplication.proto.LogReplicationMetadata.ReplicationStatus;
+import org.corfudb.runtime.proto.service.CorfuMessage.LogReplicationSession;
 import org.corfudb.infrastructure.logreplication.proto.Sample;
 import org.corfudb.infrastructure.logreplication.replication.receive.LogReplicationMetadataManager;
 import org.corfudb.runtime.collections.CorfuStore;
@@ -106,11 +107,11 @@ public class CorfuReplicationUpgradeIT extends LogReplicationAbstractIT {
 
         // Subscribe to replication status table on Standby (to be sure data change on status are captured)
         corfuStoreStandby.openTable(LogReplicationMetadataManager.NAMESPACE,
-            LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
-            LogReplicationMetadata.ReplicationStatusKey.class,
-            LogReplicationMetadata.ReplicationStatusVal.class,
+            LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
+            LogReplicationSession.class,
+            ReplicationStatus.class,
             null,
-            TableOptions.fromProtoSchema(LogReplicationMetadata.ReplicationStatusVal.class));
+            TableOptions.fromProtoSchema(ReplicationStatus.class));
 
         CountDownLatch statusUpdateLatch = new CountDownLatch(2);
         ReplicationStatusListener standbyListener = new ReplicationStatusListener(statusUpdateLatch, false);
@@ -208,11 +209,11 @@ public class CorfuReplicationUpgradeIT extends LogReplicationAbstractIT {
 
         // Subscribe to replication status table on Standby (to be sure data change on status are captured)
         corfuStoreStandby.openTable(LogReplicationMetadataManager.NAMESPACE,
-            LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
-            LogReplicationMetadata.ReplicationStatusKey.class,
-            LogReplicationMetadata.ReplicationStatusVal.class,
+            LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
+            LogReplicationSession.class,
+            ReplicationStatus.class,
             null,
-            TableOptions.fromProtoSchema(LogReplicationMetadata.ReplicationStatusVal.class));
+            TableOptions.fromProtoSchema(ReplicationStatus.class));
 
         CountDownLatch statusUpdateLatch = new CountDownLatch(2);
         ReplicationStatusListener standbyListener = new ReplicationStatusListener(statusUpdateLatch, false);
@@ -312,11 +313,11 @@ public class CorfuReplicationUpgradeIT extends LogReplicationAbstractIT {
 
         // Subscribe to replication status table on Standby (to be sure data change on status are captured)
         corfuStoreStandby.openTable(LogReplicationMetadataManager.NAMESPACE,
-            LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
-            LogReplicationMetadata.ReplicationStatusKey.class,
-            LogReplicationMetadata.ReplicationStatusVal.class,
+            LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
+            LogReplicationSession.class,
+            ReplicationStatus.class,
             null,
-            TableOptions.fromProtoSchema(LogReplicationMetadata.ReplicationStatusVal.class));
+            TableOptions.fromProtoSchema(ReplicationStatus.class));
 
         CountDownLatch statusUpdateLatch = new CountDownLatch(2);
         ReplicationStatusListener standbyListener = new ReplicationStatusListener(statusUpdateLatch, false);
@@ -452,11 +453,11 @@ public class CorfuReplicationUpgradeIT extends LogReplicationAbstractIT {
 
         // Subscribe to replication status table on Standby (to be sure data change on status are captured)
         corfuStoreStandby.openTable(LogReplicationMetadataManager.NAMESPACE,
-            LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
-            LogReplicationMetadata.ReplicationStatusKey.class,
-            LogReplicationMetadata.ReplicationStatusVal.class,
+            LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
+            LogReplicationSession.class,
+            ReplicationStatus.class,
             null,
-            TableOptions.fromProtoSchema(LogReplicationMetadata.ReplicationStatusVal.class));
+            TableOptions.fromProtoSchema(ReplicationStatus.class));
 
         CountDownLatch statusUpdateLatch = new CountDownLatch(2);
         ReplicationStatusListener standbyListener = new ReplicationStatusListener(statusUpdateLatch, false);
@@ -563,11 +564,11 @@ public class CorfuReplicationUpgradeIT extends LogReplicationAbstractIT {
 
         // Subscribe to replication status table on Standby (to be sure data change on status are captured)
         corfuStoreStandby.openTable(LogReplicationMetadataManager.NAMESPACE,
-            LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
-            LogReplicationMetadata.ReplicationStatusKey.class,
-            LogReplicationMetadata.ReplicationStatusVal.class,
+            LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
+            LogReplicationSession.class,
+            ReplicationStatus.class,
             null,
-            TableOptions.fromProtoSchema(LogReplicationMetadata.ReplicationStatusVal.class));
+            TableOptions.fromProtoSchema(ReplicationStatus.class));
 
         CountDownLatch statusUpdateLatch = new CountDownLatch(2);
         ReplicationStatusListener standbyListener = new ReplicationStatusListener(statusUpdateLatch, false);
@@ -709,11 +710,11 @@ public class CorfuReplicationUpgradeIT extends LogReplicationAbstractIT {
 
         // Subscribe to replication status table on Standby (to be sure data change on status are captured)
         corfuStoreStandby.openTable(LogReplicationMetadataManager.NAMESPACE,
-                LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
-                LogReplicationMetadata.ReplicationStatusKey.class,
-                LogReplicationMetadata.ReplicationStatusVal.class,
+                LogReplicationMetadataManager.REPLICATION_STATUS_TABLE_NAME,
+                LogReplicationSession.class,
+                ReplicationStatus.class,
                 null,
-                TableOptions.fromProtoSchema(LogReplicationMetadata.ReplicationStatusVal.class));
+                TableOptions.fromProtoSchema(ReplicationStatus.class));
 
         CountDownLatch statusUpdateLatch = new CountDownLatch(2);
         ReplicationStatusListener standbyListener = new ReplicationStatusListener(statusUpdateLatch, false);
