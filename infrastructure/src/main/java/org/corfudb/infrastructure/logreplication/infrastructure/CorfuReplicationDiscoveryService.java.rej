diff a/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java b/infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java	(rejected hunks)
@@ -335,11 +335,13 @@ public class CorfuReplicationDiscoveryService implements Runnable, CorfuReplicat
         // such as streams to replicate and version
         LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());
 
+        // TODO(AGMM): the metadataManager & LogReplicatioServer should probably be created on leadership acquire (second one role-based)
         logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),
-            topologyDescriptor.getTopologyConfigId(), localClusterDescriptor.getClusterId());
+            topologyDescriptor, LogReplicationConfigManager.getCurrentVersion());
 
         logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,
-            logReplicationMetadataManager, localCorfuEndpoint, topologyDescriptor.getTopologyConfigId(), localNodeId);
+            logReplicationMetadataManager, localCorfuEndpoint, topologyDescriptor.getTopologyConfigId(), localNodeId,
+                localClusterDescriptor.getClusterId());
         logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));
         logReplicationServerHandler.setStandby(localClusterDescriptor.getRole().equals(ClusterRole.STANDBY));
 
@@ -794,13 +796,13 @@ public class CorfuReplicationDiscoveryService implements Runnable, CorfuReplicat
      * snapshot sync is in the apply phase)
      */
     @Override
-    public Map<String, LogReplicationMetadata.ReplicationStatusVal> queryReplicationStatus() {
+    public Map<String, ReplicationStatus> queryReplicationStatus() {
         if (localClusterDescriptor == null || logReplicationMetadataManager == null) {
             log.warn("Cluster configuration has not been pushed to current LR node.");
             return null;
         } else if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {
-            Map<String, LogReplicationMetadata.ReplicationStatusVal> mapReplicationStatus = logReplicationMetadataManager.getReplicationRemainingEntries();
-            Map<String, LogReplicationMetadata.ReplicationStatusVal> mapToSend = new HashMap<>(mapReplicationStatus);
+            Map<String, ReplicationStatus> mapReplicationStatus = logReplicationMetadataManager.getReplicationRemainingEntries();
+            Map<String, ReplicationStatus> mapToSend = new HashMap<>(mapReplicationStatus);
             // If map contains local cluster, remove (as it might have been added by the SinkManager) but this node
             // has an active role.
             if (mapToSend.containsKey(localClusterDescriptor.getClusterId())) {
@@ -809,32 +811,32 @@ public class CorfuReplicationDiscoveryService implements Runnable, CorfuReplicat
             }
             return mapToSend;
         } else if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {
-            return logReplicationMetadataManager.getDataConsistentOnStandby();
+            return logReplicationMetadataManager.getDataConsistentOnStandby(localClusterDescriptor.clusterId);
         }
         log.error("Received Replication Status Query in Incorrect Role {}.", localClusterDescriptor.getRole());
         return null;
     }
 
     @Override
-    public UUID forceSnapshotSync(String clusterId) throws LogReplicationDiscoveryServiceException {
+    public UUID forceSnapshotSync(String remoteClusterId) throws LogReplicationDiscoveryServiceException {
         if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {
-            String errorStr = "The forceSnapshotSync command is not supported on standby cluster.";
+            String errorStr = "Force snapshot sync is not supported on sink. Please request from source node.";
             log.error(errorStr);
             throw new LogReplicationDiscoveryServiceException(errorStr);
         }
 
         UUID forceSyncId = UUID.randomUUID();
-        log.info("Received forceSnapshotSync command for standby cluster {}, forced sync id {}",
-                clusterId, forceSyncId);
+        log.info("Received forceSnapshotSync request to (sink) cluster {}, force_sync_id={}",
+                remoteClusterId, forceSyncId);
 
         // Write a force sync event to the logReplicationEventTable
-        ReplicationEventKey key = ReplicationEventKey.newBuilder().setKey(System.currentTimeMillis() + " " + clusterId).build();
+        ReplicationEventKey key = ReplicationEventKey.newBuilder().setKey(System.currentTimeMillis() + " " + remoteClusterId).build();
         ReplicationEvent event = ReplicationEvent.newBuilder()
-                .setClusterId(clusterId)
+                .setClusterId(remoteClusterId)
                 .setEventId(forceSyncId.toString())
                 .setType(ReplicationEvent.ReplicationEventType.FORCE_SNAPSHOT_SYNC)
                 .build();
-        getLogReplicationMetadataManager().updateLogReplicationEventTable(key, event);
+        logReplicationMetadataManager.addEvent(key, event);
         return forceSyncId;
     }
 
