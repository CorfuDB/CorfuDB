syntax = "proto3";

package org.corfudb.infrastructure.logreplication;
option java_package = "org.corfudb.infrastructure.logreplication";

import "google/protobuf/any.proto";
import "service/corfu_message.proto";


service LogReplication {

    // Used only by Source when connection initiator: RPC method to send a negotiation request
    rpc negotiate(org.corfudb.runtime.RequestMsg) returns (org.corfudb.runtime.ResponseMsg) {}

    // Connection initiator sends Leadership Request
    rpc queryLeadership(org.corfudb.runtime.RequestMsg) returns (org.corfudb.runtime.ResponseMsg) {}

    // Used only by Source when connection starter: A client-side streaming RPC where the client writes a sequence of
    // messages and sends them to the server, again using a provided stream. Once the client has finished writing the
    // messages, it waits for the server to read them all and return its response (ack).
    rpc replicate(stream org.corfudb.runtime.RequestMsg) returns (org.corfudb.runtime.ResponseMsg) {}

    // Used only by Sink when connection starter. This RPC creates a long living stream, on which the source and
    // sink exchange negotiation-msg/replication-msg/ACKs
    rpc reverseReplicate(stream org.corfudb.runtime.ResponseMsg) returns (stream org.corfudb.runtime.RequestMsg) {}

    rpc sinkSideSessionInitialize(stream org.corfudb.runtime.RequestMsg) returns (org.corfudb.runtime.ResponseMsg) {}
}
