syntax = "proto3";

package org.corfudb.infrastructure.logreplication;
option java_package = "org.corfudb.infrastructure.logreplication";

import "google/protobuf/any.proto";
import "service/corfu_message.proto";


service LogReplication {

    // RPC method to send a negotiation request
    rpc negotiate(org.corfudb.runtime.RequestMsg) returns (org.corfudb.runtime.ResponseMsg) {}

    // Sends Leadership Request to find the remote node to which data would be sent
    rpc queryLeadership(org.corfudb.runtime.RequestMsg) returns (org.corfudb.runtime.ResponseMsg) {}

    // A client-side streaming RPC where the client writes a sequence of messages and sends them to the server,
    // again using a provided stream. Once the client has finished writing the messages, it waits for the server to read
    // them all and return its response (ack).
    rpc replicate(stream org.corfudb.runtime.RequestMsg) returns (org.corfudb.runtime.ResponseMsg) {}
}
